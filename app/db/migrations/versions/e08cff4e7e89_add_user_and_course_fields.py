"""add user and course fields

Revision ID: e08cff4e7e89
Revises: a6e8b48488b1
Create Date: 2025-08-18 09:55:31.281254

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e08cff4e7e89"
down_revision: Union[str, Sequence[str], None] = "a6e8b48488b1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    level_type_enum = postgresql.ENUM(
        "BEGINNER", "INTERMEDIATE", "EXPERT", name="levelenum"
    )
    level_type_enum.create(op.get_bind(), checkfirst=True)
    op.add_column(
        "courses",
        sa.Column("requirements", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column(
        "courses",
        sa.Column("objectives", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.add_column(
        "courses",
        sa.Column(
            "level",
            sa.Enum("BEGINNER", "INTERMEDIATE", "EXPERT", name="levelenum"),
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("is_admin", sa.Boolean(), nullable=True))
    op.add_column("users", sa.Column("last_login", sa.DateTime(), nullable=True))
    op.create_index(op.f("ix_users_is_admin"), "users", ["is_admin"], unique=False)
    op.create_index(op.f("ix_users_last_login"), "users", ["last_login"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_last_login"), table_name="users")
    op.drop_index(op.f("ix_users_is_admin"), table_name="users")
    op.drop_column("users", "last_login")
    op.drop_column("users", "is_admin")
    op.drop_column("courses", "level")
    op.drop_column("courses", "objectives")
    op.drop_column("courses", "requirements")
    level_type_enum = postgresql.ENUM(
        "BEGINNER", "INTERMEDIATE", "EXPERT", name="levelenum"
    )
    level_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
